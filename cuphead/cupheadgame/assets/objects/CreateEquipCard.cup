b5.export = function(world, scene, data, game) {
	var myexports = {};

	//Load weapons, charms and supers resources
	let weaponList = JSON.parse(b5.File.readSync(b5.Paths.player+'weapons.json')),
	charmList = JSON.parse(b5.File.readSync(b5.Paths.player+'charms.json')),
	superList = JSON.parse(b5.File.readSync(b5.Paths.player+'supers.json')),
	levelDisplays = JSON.parse(b5.File.readSync(b5.Paths.scenes+'display_levels.json'));
	
	data.EquipmentList = {
		weapons: weaponList,
		charms: charmList,
		supers: superList
	};

	//Load weapon icons
	for (var i = 0; i < weaponList.length; i++)
		if(weaponList[i] && weaponList[i] != 'empty') game.parseResources(JSON.parse(
		b5.File.readSync(
			b5.Paths.player+ 'weapons/' + weaponList[i] + '/resources-worldmap.json'
		)), scene);

	//Load charm icons
	for (var i = 0; i < charmList.length; i++)
		if(charmList[i] && charmList[i] != 'empty') game.parseResources(JSON.parse(
		b5.File.readSync(
			b5.Paths.player+ 'charms/' + charmList[i] + '/resources-worldmap.json'
		)), scene);

	//Load super icons
	for (var i = 0; i < superList.length; i++)
		if(superList[i] && superList[i] != 'empty') game.parseResources(JSON.parse(
		b5.File.readSync(
			b5.Paths.player+ 'supers/' + superList[i] + '/resources-worldmap.json'
		)), scene);
		
	if( game.Flags.allItemsUnlocked && 
	   game.SlotUtils.getPlayerInventory('playerOne')._charms.indexOf(game.GetItemId('drew')) == -1
	  ) charmList[charmList.indexOf('drew')] = 'empty';
	
	var sfxList = {
		card_up: scene.findResource('MenuCardUpSfx','sound'),
		card_down: scene.findResource('MenuCardDownSfx','sound'),
		card_flip: scene.findResource('MenuCardFlipSfx','sound'),
		equip_move: scene.findResource('MenuEquipMoveSfx','sound'),
		menu_locked: scene.findResource('MenuLockedSfx','sound'),
		menu_card_page: scene.findResource('MenuCardPageSfx','sound'),
		select_sfx: scene_GUI.findResource('MenuSelectSfx','sound')
	};
	
	var equipCardsManager = scene.data.EquipCardsManager = {
		cards: [],
		weaponLay: {
			columns: 3,
			rows: 2,
			length: 6,
			offsetX: -100,
			offsetY: -100,
			padX: 100,
			padY: 97,
			scale: 1.25
		},
		superLay: {
			columns: 3,
			rows: 1,
			length: 3,
			offsetX: -100,
			offsetY: -100,
			padX: 100,
			padY: 97,
			scale: 1.25
		},
		charmLay: {
			columns: 5,
			rows: 2,
			length: 10,
			offsetX: -200,
			offsetY: -100,
			padX: 100,
			padY: 97,
			scale: 1.25
		},
		locked_level: '?????',
		BWF: new PIXI.filters.ColorMatrixFilter(),
		show: function() {
			game.Flags.inEquipCard = true;
			game.Flags.inSomeMenu = true;
			game.Flags.pausingEnabled = false;

			if(!game.Flags.inLevel) game.PauseMenu.TweenMusic(true);
			
			sfxList.card_up && sfxList.card_up.play();
			//Move the card up or down a little to keep ui texts readable
			var pY = 12; //b5.Utils.IsMobile() ? 12 : -10;
			
			for(var i = 0, c = this.cards; i < c.length; i++) {
				c[i].front_sel = 0;
				c[i].frontBox.selector._x2 = 0;
				if(game.Multiplayer.player2Joined) {
					//Go From side
					c[i]._av = true;
					c[i]._rotation = 0;
					c[i]._x = c[i].isPlyOne ? (-scene_GUI.w/2) - 600 : (scene_GUI.w/2) + 600;
					c[i]._y = pY;
					c[i].TweenToWithEnd('_x',c[i].x >= 0 ? (scene_GUI.w / 2) -330 : (-scene_GUI.w / 2) +330,0.5,b5.Ease.cubicout,true,0,
					  x => x.inFrontPage = true);
					c[i].TweenTo('_rotation', Math.PI * b5.Maths.randomRange(-0.02,0.02,1), 0.5, b5.Ease.cubicout);
				}
				else {
					//From bottom
					c[i]._y = (scene_GUI.h/2) + 800;
					c[i]._x = 0;
					c[i]._av = c[i].isPlyOne;
					c[i]._rotation = 0;
					c[i].TweenToWithEnd('_y',pY,0.5,b5.Ease.cubicout,true,0, x => x.inFrontPage = true);
					c[i].TweenTo('_rotation', Math.PI * b5.Maths.randomRange(-0.022,0.022,1), 0.5, b5.Ease.cubicout);
				}
			}
			
			//Update UI
			b5.Game.UiButtons.setButtons([
				{
					text: "texts.ui_confirm",
					actionButton: "jump"
				},
				{
					text: "texts.general_back",
					actionButton: "shoot"
				},
				{
					text: "texts.equip_card_unequip",
					actionButton: "dash"
				}
			]);
			b5.Game.UiButtons.show(true);
			scene.events.dispatch('showequipcard');
		},
		hideAll: function(nofx) {
			game.Flags.inEquipCard = false;
			game.Flags.pausingEnabled = !scene.data.players_dead;
			
			sfxList.card_down && sfxList.card_down.play();
			if(!nofx && !game.Flags.inLevel) game.PauseMenu.TweenMusic(false);
			
			for(var i = 0, c = this.cards; i < c.length; i++) {
				!c[i].inFrontPage && c[i].goBackToFront();
				if(game.Multiplayer.player2Joined) {
					//Go to side
					c[i].TweenToWithEnd('_x',c[i].x >= 0 ? (scene_GUI.w/2) + 600 : (-scene_GUI.w/2) - 600,0.2,b5.Ease.quadin,true,0, d => {
						d._av = false;
						game.Flags.inSomeMenu = false;
					});
				}
				else {
					//Go down
					c[i].TweenToWithEnd('_y',800,0.2,b5.Ease.quadout,true,0, d => {
						d._av = false;
						game.Flags.inSomeMenu = false;
					});
				}
			}
			b5.Game.UiButtons.hide(true);
			scene.events.dispatch('hideequipcard');
		}
	}
	
	equipCardsManager.BWF.blackAndWhite(1);
	
	//Hide if player joined or quit
	scene.events.on('playeradded', mp => {
		for(var i = 0; i < equipCardsManager.cards.length; i++)
		  equipCardsManager.cards[i].goBackToFront();
		equipCardsManager.hideAll(true);
	});
	scene.events.on('playerremoved', mp => {
		for(var i = 0; i < equipCardsManager.cards.length; i++)
		  equipCardsManager.cards[i].goBackToFront();
		equipCardsManager.hideAll();
	});


	const characters = ["cuphead",
		"mugman"];

	//Card objects (for p1 and p2)

	for (var i = 0; i < characters.length; i++) {
		//Resources
		game.parseResources(
			JSON.parse(b5.File.readSync(b5.Paths.scenes+'common/equipCards/'+characters[i]+'/resources.json')), scene);

		//Card

		const plyrCard = new b5.Actor();
		plyrCard.setSize(595, 668);

		plyrCard.id = characters[i];
		plyrCard.tag = "EquipCardUI";
		plyrCard.name = characters[i] + "-EquipCard";
		plyrCard.front_Bitmap = scene.findResource(plyrCard.id+":EquipCardFront", "bitmap");
		plyrCard.back_Bitmap = scene.findResource(plyrCard.id+":EquipCardBack","bitmap");
		plyrCard.waiting_Bitmap	= scene.findResource('EquipCardReadyAndWaitingBG','bitmap');
		plyrCard.list_Bitmap = scene.findResource('EquipCardChecklistBG', 'bitmap');
		plyrCard.bitmap = plyrCard.front_Bitmap;
		plyrCard.layer = 5;

		// ADD TO SCENE GUI
		scene_GUI.addActor(plyrCard);
		equipCardsManager.cards.push(plyrCard);
		plyrCard._av = false;

		plyrCard.front_sel = 0;
		plyrCard.front_sel_ids = ["primaryWeapon","secondaryWeapon","super","charm", null];
		plyrCard.back_sel = {
			x: 0,
			y: 0
		}
		
		//Cqrd mask (for flip animations)
		var plyrCardMask = new b5.RectActor();
		plyrCard.addActor(plyrCardMask);
		plyrCardMask.setSize(600,700);
		plyrCard.mask = plyrCardMask;
		
		plyrCard.setMask(plyrCardMask);
		
		plyrCard.onTick = plyrCard.dirty;

		//Icons
		plyrCard.isPlyOne =
		(game.SaveSlots.currentSaveSlot.isPlayer1Mugman && characters[i] == "mugman") ||
		(!game.SaveSlots.currentSaveSlot.isPlayer1Mugman && characters[i] != "mugman");
		plyrCard.playerId = plyrCard.isPlyOne ? 'playerOne': 'playerTwo';
		
		plyrCard.loadout = game.SlotUtils.getPlayerLoadouts(plyrCard.playerId);
		plyrCard.inventory = game.SlotUtils.getPlayerInventory(plyrCard.playerId);
		
		//Create player cover
		var cover = new b5.Actor();
		if(!plyrCard.isPlyOne) {
			cover.bitmap = scene.findResource(plyrCard.id + ':EquipCardP2Cover','bitmap');
			cover.setSize(106,128);
			cover.setPosition(221.5,-249);
		}
		plyrCard.addActor(cover);
		plyrCard.pCover = cover;
		
		plyrCard.openSection = function(section) {
			this.inFrontPage = false;
			//Sfx
			sfxList.card_flip && sfxList.card_flip.play();
			//Animate
			this.mask._scale_x = 1;
			this.mask.TweenToWithEnd('_scale_x',0,0.06,b5.Ease.quadin,true,0,f => {
				//Animate card and mask
				this.mask.TweenTo('_scale_x',1,0.06,b5.Ease.cubicout,true);
				this._scale_x = 0.7;
				this.skew_y = 0;
				this.pCover._av = false;
				this.frontBox.selector._av = false;
				this.TweenTo('_scale_x',1,0.11,b5.Ease.backout);
				
				//Set bitmap
				this.bitmap = this.front_sel == 4 ? this.list_Bitmap:this.back_Bitmap;
				if(section == 'waiting') this.bitmap = this.waiting_Bitmap;
				this.frontBox._av = false;
				
				//Open section
				switch(section) {
					case 'primaryWeapon':
						this.createWeaponSection(section, b5.Game.Texts.texts.equip_card_shot_a);
						break;
					case 'secondaryWeapon':
						this.createWeaponSection(section, b5.Game.Texts.texts.equip_card_shot_b);
						break;
					case 'super':
						this.createSuperSection(section, b5.Game.Texts.texts.equip_card_super);
						break;
					case 'charm':
						this.createCharmSection(section, b5.Game.Texts.texts.equip_card_charm)
						break;
					case 'list':
						this.createListSection('world1');
						break;
					case 'waiting':
				//		this.createWaitingSection();
						break;
				}
			});
			this.TweenTo('skew_y',0.02,0.06);
			
		}
		
		plyrCard.goBackToFront = function() {
			this.inFrontPage = true;
			//Sfx
			sfxList.card_flip && sfxList.card_flip.play();
			//Animate
			this.mask._scale_x = 1;
			this.mask.TweenToWithEnd('_scale_x',0,0.06,b5.Ease.quadin,true,0,f => {
				//Animate card and mask
				this.mask.TweenTo('_scale_x',1,0.06,b5.Ease.cubicout,true);
				this._scale_x = 0.7;
				this.skew_y = 0;
				this.pCover._av = true;
				this.frontBox.selector._av = true;
				this.TweenTo('_scale_x',1,0.11,b5.Ease.backout);
				
				//Set bitmap
				this.bitmap = this.front_Bitmap;
				this.frontBox._av = true;
				
				//Destroy previous section
				if(this.current) {
					this.current.destroy();
					this.current = null;
				}
				
				//Update icon
				for(var x = 0; x < this.front_sel_ids.length-1;x++) this.frontBox.updateIcon(x,
				  b5.Game.GetItemName(this.loadout[this.front_sel_ids[x]])
				);
			});
			this.TweenTo('skew_y',-0.02,0.06);
		}
		
		/* 
		* === PRIMARY & SECONDARY WEAPON SECTION ===
		*/
		
		//B&W filter to apply on weapon equiped on primary/secondary
		plyrCard.BWF = equipCardsManager.BWF;
		
		plyrCard.createWeaponSection = function(idSection,title) {
			var listBox = new b5.Actor(),
			textSec = new b5.LabelActor(),
			textWpnInfo = new b5.LabelActor(),
			atlas = scene.findResource('EquipCardCommonAtlas','brush'),
			extraBoldFont = scene_GUI.findResource('CupheadVogueExtraBoldFont','brush'),
			secondary = idSection == 'secondaryWeapon' ? 'primaryWeapon' : 'secondaryWeapon';
			
			textSec.font = textWpnInfo.font = scene_GUI.findResource('CupheadMemphisFont', 'brush');
			listBox.addActor(textSec);
			listBox.addActor(textWpnInfo);
			
			textWpnInfo.onTick = function() {
				this.setFormatLine(0, 0, 0, [null, extraBoldFont,0,-25,1.6,1.6],true);
				this.setFormatLine(1, 0, 0, [null, extraBoldFont,0,-7,1.15,1.15]);
				
				this.setFormatLine(2, 0, 0, [null, textSec.font]);
				this.setFormatLine(3, 0, 0, [null, textSec.font]);
			}
			textWpnInfo._scale = 0.62;
			textWpnInfo.line_height = 50;
			textWpnInfo._y = 140;
			
			textWpnInfo.fill_style = b5.Game.Styles.text_pausemenu;
			
			textWpnInfo.updateInfoFor = function(icon) {
				if(!icon) icon = 'empty';
				
				if(icon == 'empty') icon = 'equip_card_empty_locked';
				this.text = 
				  b5.Game.Texts.texts[icon] + (icon != 'equip_card_empty_locked' ? '\nEX: ' : '\n') +
				  b5.Game.Texts.texts[icon+':ex'] +'\n'+
					b5.Game.Texts.texts[icon+':info'];
			}
			
			textWpnInfo.updateInfoFor( b5.Game.GetItemName(this.loadout[idSection]) );
			
			textSec._scale = 1.3;
			textSec._y = -220;
			textSec.fill_style = "#d5c2b0";
			textSec.text = title;
			
			for(var m = 0, a = equipCardsManager.weaponLay, lx = a.offsetX, ly = a.offsetY, cl = 0, cly = 0, b = a.columns; m < a.length; m++) {
				var spc = new b5.Actor();
				spc.atlas = atlas;
				listBox.addActor(spc);
				spc.current_frame = 45;
				spc._scale = a.scale;
				spc.opacity = 0.5;
				
				spc.setPosition(lx, ly);
				
				//Add icon
				var icon = new b5.Actor(),
				item = weaponList[m];
				
				if(this.inventory._weapons.indexOf(b5.Game.GetItemId(item)) == -1 && !b5.Game.Flags.allItemsUnlocked)
				  item = 'empty';
				
				icon.atlas = scene.findResource(item + ':EQUIP_ICON','brush');
				icon.frame_speed = 12;
				icon._scale = 1 / a.scale;
				icon.oScale = icon.scale;
				icon.use_parent_opacity = false;
				icon.name = item;
				icon.id = icon.name+'-iconBack';
				icon.tag = "icon";
				icon.E = null;
				icon.pos = {
					x: cl,
					y: cly
				};
				spc.addActor(icon);
				icon.card = this;
				
				//Use black and white filter if equiped on secondary
				icon.updateSec = function() {
					if(this.name == b5.Game.GetItemName(this.card.loadout[secondary])) {
					  this.addFilter(this.card.BWF);
					  this.equipedOnSecondary = true;
					}
					else {
						this.removeFilter();
						this.equipedOnSecondary = false;
					}
				}
				
				icon.updateSec();
				
				cl++; 
				lx += a.padX;
				cl >= b && (ly += a.padY, lx = a.offsetX, cl = 0, cly++);
			}
			
			listBox.getIconFromPos = function(x,y, actor) {
				var icons = this.findActorsByTagName('icon',true);
				for(var g = 0; g < icons.length; g++)
				  if(icons[g].pos.x == x && icons[g].pos.y == y) return actor ? icons[g] : icons[g].name;
			}
			
			//If not equiped
			var tmpunequiped = b5.Game.GetItemName(this.loadout[idSection]) == "empty";
			tmpunequiped && textWpnInfo.updateInfoFor(listBox.getIconFromPos(0,0));
			
			//Selector
			var pIconSel = new b5.Actor(),
			pos = listBox.findActorById( b5.Game.GetItemName(this.loadout[idSection])+'-iconBack',true);
			
			if(!pos || tmpunequiped) pos = {
			  	parent: {
			  		x: equipCardsManager.weaponLay.offsetX,
			  		y: equipCardsManager.weaponLay.offsetY
			  	},
			  	pos: {
			  		x: 0,
			  		y: 0
			  	},
			  	unequiped: true
			  }
			
			pIconSel.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
			pIconSel.setPosition(pos.parent.x,pos.parent.y);
			pIconSel._oy = 2;
			pIconSel.playAnim('icon_selector', true);
			pIconSel._scale = pIconSel.oScale = 1.05;
			pIconSel._layer = 2;
			pIconSel.pos = {x: pos.pos.x, y: pos.pos.y};
			
		  //Sheen
		  var pIconSheen = new b5.Actor();
		  pIconSheen.atlas = pIconSel.atlas;
		  pIconSheen.visible = false;
		  pIconSheen.onAnimEnd = function() {
		  	this.visible = false;
		  }
		  pIconSheen.sheen = function() {
		  	this.visible = true;
		  	this._oy = 50;
		  	this.playAnim('icon_sheen');
		  }
		  pIconSel.addActor(pIconSheen);
		  
		  //Equiped marker
		  var pIconEq = new b5.Actor();
		  pIconEq.atlas = pIconSheen.atlas;
		  pIconEq.visible = !pos.unequiped;
		  pIconEq.playAnim('icon_equiped',true);
		  listBox.addActor(pIconEq);
		  pIconEq.x2 = 30;
		  pIconEq.y2 = -30;
		  pIconEq._layer = 3;
		  pIconEq.setPosition(pos.parent.x,pos.parent.y);
	
			listBox.addActor(pIconSel);
	
			pIconSel.card = plyrCard;
			pIconSel.box = listBox;
	
			//Controls
			pIconSel.resetHolds = function() {
				this.btnA = this.btnB = this.btnX = true,
				this.axis_xm = true;
				this.axis_ym = true;
			}
			pIconSel.resetHolds();
	
			pIconSel.onTick = function() {
				var input = b5.Game.Input,
				axis_x = Math.round(this.card.isPlyOne ? input.player1.axis_x: input.player2.axis_x),
				axis_y = Math.round(this.card.isPlyOne ? input.player1.axis_y: input.player2.axis_y),
				btnA = this.card.isPlyOne ? input.player1.A: input.player2.A,
				btnB = this.card.isPlyOne ? input.player1.B: input.player2.B,
				btnX = this.card.isPlyOne ? input.player1.X: input.player2.X,
				em = equipCardsManager.weaponLay;
				
				//Move in columns and rows
				if(axis_x != 0 && !this.axis_xm) {
					this.axis_xm = true;
					
					this.pos.x += axis_x;
					this.pos.x < 0 && (this.pos.x = em.columns-1);
					this.pos.x > em.columns-1 && (this.pos.x = 0);
					
					//Sfx
					sfxList.equip_move && sfxList.equip_move.play();
				  
					this.setPosition((this.pos.x * em.padX) + em.offsetX, this.y);
					
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_x == 0) this.axis_xm = false;
				
				//Move in columns and rows
				if(axis_y != 0 && !this.axis_ym) {
					this.axis_ym = true;
					
					this.pos.y += axis_y;
					this.pos.y < 0 && (this.pos.y = em.rows-1);
					this.pos.y > em.rows-1 && (this.pos.y = 0);
					
					//Sfx
					sfxList.equip_move && sfxList.equip_move.play();
				  
				  this.setPosition(this.x, (this.pos.y * em.padY) + em.offsetY);
				  
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_y == 0) this.axis_ym = false;
				
				//Select
				if(btnA && !this.btnA) {
					this.btnA = true;
					
					//Equip
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';
				 	
				 	//If on secondary and secondaryWeapon is equiped, swap
				 	if(icon.equipedOnSecondary || icon.name == 'empty') {
					    if(!isEmpty && icon.name != 'empty') {
					    this.card.loadout[secondary] = this.card.loadout[idSection];
					 	
		  			 	this.card.loadout[idSection] = b5.Game.GetItemId(icon.name);
						
					  	for(var m = 0, b = this.box.findActorsByTagName('icon',true);m<b.length;m++)
		  				  b[m].updateSec();
		  				  
				    }
				    else {
				    	//No secondaryWeapon equiped
					    //Play no anim
					  	this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  		s.TweenTo('_scale',s.oScale,0.1);
					  	});
				    	icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	  	s.TweenTo('_scale',s.oScale,0.1);
				    	});
				    	
				    	//Sfx
				    	sfxList.menu_locked && sfxList.menu_locked.play();
				    }
				 	}
				 	else {
				 		this.card.loadout[idSection] = b5.Game.GetItemId(icon.name);
				 		isEmpty = false;
				 	}
				 	
				 	//Animate
				 	if(!isEmpty && icon.name != 'empty') {
				 		pIconEq.timelines.remove(); //Clear any anim
						pIconEq.setPosition(this.x,this.y);
						pIconEq.visible = true;
						pIconEq._scale = 1;
						//Anim sheen
						pIconSheen.sheen();
						
						sfxList.select_sfx.play();
						
						//Anim scale
					 	this.TweenToWithEnd('_scale', this.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					 	//Anim icon scale
					 	icon.TweenToWithEnd('_scale', icon.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					}
					
				}
				else if(!btnA) this.btnA = false;
				
				//Unequip
				if(btnX && !this.btnX) {
					this.btnX = true;
					
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';
					
					if(idSection != 'primaryWeapon' && !isEmpty && icon.name != 'empty') {
						pIconEq._scale = 1;
						pIconEq.TweenTo('_scale',0,0.2, b5.Ease.linear, true, 0);
						
						//Unequip
						this.card.loadout[idSection] = b5.Game.GetItemId('empty');
						
						sfxList.select_sfx.play();
					}
					else {
						//Play no anim
					  this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
				  	});
				   	icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	 	s.TweenTo('_scale',s.oScale,0.1);
				   	});
				   	
				   	sfxList.menu_locked && sfxList.menu_locked.play();
					}
					
				}
				else if(!btnX) this.btnX = false;
				
				//Back
				if(btnB && !this.btnB) {
					this.btnB = true;
					
					//Return
					this.card.goBackToFront();
				}
				else if(!btnB) this.btnB = false;
			}
			
			plyrCard.addActor(listBox);
			listBox.id = idSection + "ListBox";
			plyrCard.current = listBox;
		}
		
				
		/* 
		* ========== SUPERS SECTION ==========
		*/
		
		plyrCard.createSuperSection = function(idSection,title) {
			var listBox = new b5.Actor(),
			textSec = new b5.LabelActor(),
			textWpnInfo = new b5.LabelActor(),
			atlas = scene.findResource('EquipCardCommonAtlas','brush'),
			extraBoldFont = scene_GUI.findResource('CupheadVogueExtraBoldFont','brush');
			
			textSec.font = textWpnInfo.font = scene_GUI.findResource('CupheadMemphisFont', 'brush');
			listBox.addActor(textSec);
			listBox.addActor(textWpnInfo);
			
			textWpnInfo.onTick = function() {
				this.setFormatLine(0, 0, 0, [null, extraBoldFont,0,-25,1.6,1.6],true);
				this.setFormatLine(1, 0, 0, [null, extraBoldFont,0,-7,1.15,1.15]);
				
				this.setFormatLine(2, 0, 0, [null, textSec.font]);
				this.setFormatLine(3, 0, 0, [null, textSec.font]);
			}
			textWpnInfo._scale = 0.62;
			textWpnInfo.line_height = 50;
			textWpnInfo._y = 140;
			
			textWpnInfo.fill_style = b5.Game.Styles.text_pausemenu;
			
			textWpnInfo.card = this;
			
			textWpnInfo.updateInfoFor = function(icon) {
				if(!icon) icon = 'empty';
				
				//If no item present, set to locked
				//Otherwise if astral cookie equiped, change descriptions
				if(icon == 'empty') icon = 'equip_card_empty_locked';
				else if( b5.Game.GetItemName(this.card.loadout.charm) == 'cookie')
				  icon = 'chalice_' + icon; //chalice_superartX
				  
				this.text = 
				  b5.Game.Texts.texts[icon] + '\n' +
				  b5.Game.Texts.texts[icon+':name'] +'\n'+
					b5.Game.Texts.texts[icon+':info'];
			}
			
			textWpnInfo.updateInfoFor( b5.Game.GetItemName(this.loadout[idSection]) );
			
			textSec._scale = 1.3;
			textSec._y = -220;
			textSec.fill_style = "#d5c2b0";
			textSec.text = title;
			
			for(var m = 0, a = equipCardsManager.superLay, lx = a.offsetX, ly = a.offsetY, cl = 0, cly = 0, b = a.columns; m < a.length; m++) {
				var spc = new b5.Actor();
				spc.atlas = atlas;
				listBox.addActor(spc);
				spc.current_frame = 45;
				spc._scale = a.scale;
				spc.opacity = 0.5;
				
				spc.setPosition(lx, ly);
				
				//Add icon
				var icon = new b5.Actor(),
				item = superList[m] || 'empty';
				
				if(this.inventory._supers.indexOf(b5.Game.GetItemId(item)) == -1 && !b5.Game.Flags.allItemsUnlocked)
				  item = 'empty';
				
				icon.atlas = scene.findResource(item + ':EQUIP_ICON','brush');
				icon.frame_speed = 12;
				icon._scale = 1 / a.scale;
				icon.oScale = icon.scale;
				icon.use_parent_opacity = false;
				icon.name = item;
				icon.id = icon.name+'-iconBack';
				icon.tag = "icon";
				icon.E = null;
				icon.pos = {
					x: cl,
					y: cly
				};
				spc.addActor(icon);
				icon.card = this;
				
				cl++; 
				lx += a.padX;
				cl >= b && (ly += a.padY, lx = a.offsetX, cl = 0, cly++);
			}
			
			listBox.getIconFromPos = function(x,y, actor) {
				var icons = this.findActorsByTagName('icon',true);
				for(var g = 0; g < icons.length; g++)
				  if(icons[g].pos.x == x && icons[g].pos.y == y) return actor ? icons[g] : icons[g].name;
			}
			
			//If not equiped
			var tmpunequiped = b5.Game.GetItemName(this.loadout[idSection]) == "empty";
			tmpunequiped && textWpnInfo.updateInfoFor(listBox.getIconFromPos(0,0));
			
			//Selector
			var pIconSel = new b5.Actor(),
			pos = listBox.findActorById( b5.Game.GetItemName(this.loadout[idSection])+'-iconBack',true);
			
			if(!pos || tmpunequiped) pos = {
			  	parent: {
			  		x: equipCardsManager.superLay.offsetX,
			  		y: equipCardsManager.superLay.offsetY
			  	},
			  	pos: {
			  		x: 0,
			  		y: 0
			  	},
			  	unequiped: true
			  }
			
			pIconSel.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
			pIconSel.setPosition(pos.parent.x,pos.parent.y);
			pIconSel._oy = 2;
			pIconSel.playAnim('icon_selector', true);
			pIconSel._scale = pIconSel.oScale = 1.05;
			pIconSel._layer = 2;
			pIconSel.pos = {x: pos.pos.x, y: pos.pos.y};
			
		  //Sheen
		  var pIconSheen = new b5.Actor();
		  pIconSheen.atlas = pIconSel.atlas;
		  pIconSheen.visible = false;
		  pIconSheen.onAnimEnd = function() {
		  	this.visible = false;
		  }
		  pIconSheen.sheen = function() {
		  	this.visible = true;
		  	this._oy = 50;
		  	this.playAnim('icon_sheen');
		  }
		  pIconSel.addActor(pIconSheen);
		  
		  //Equiped marker
		  var pIconEq = new b5.Actor();
		  pIconEq.atlas = pIconSheen.atlas;
		  pIconEq.visible = !pos.unequiped;
		  pIconEq.playAnim('icon_equiped',true);
		  listBox.addActor(pIconEq);
		  pIconEq.x2 = 30;
		  pIconEq.y2 = -30;
		  pIconEq._layer = 3;
		  pIconEq.setPosition(pos.parent.x,pos.parent.y);
	
			listBox.addActor(pIconSel);
	
			pIconSel.card = plyrCard;
			pIconSel.box = listBox;
	
			//Controls
			pIconSel.resetHolds = function() {
				this.btnA = this.btnB = this.btnX = true,
				this.axis_xm = true;
				this.axis_ym = true;
			}
			pIconSel.resetHolds();
	
			pIconSel.onTick = function() {
				var input = b5.Game.Input,
				axis_x = Math.round(this.card.isPlyOne ? input.player1.axis_x: input.player2.axis_x),
				axis_y = Math.round(this.card.isPlyOne ? input.player1.axis_y: input.player2.axis_y),
				btnA = this.card.isPlyOne ? input.player1.A: input.player2.A,
				btnB = this.card.isPlyOne ? input.player1.B: input.player2.B,
				btnX = this.card.isPlyOne ? input.player1.X: input.player2.X,
				em = equipCardsManager.superLay;
				
				//Move in columns and rows
				if(axis_x != 0 && !this.axis_xm) {
					this.axis_xm = true;
					
					//Sfx
					sfxList.equip_move && sfxList.equip_move.play();
					
					this.pos.x += axis_x;
					this.pos.x < 0 && (this.pos.x = em.columns-1);
					this.pos.x > em.columns-1 && (this.pos.x = 0);
				  
					this.setPosition((this.pos.x * em.padX) + em.offsetX, this.y);
					
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_x == 0) this.axis_xm = false;
				
				//Move in columns and rows
				if(axis_y != 0 && !this.axis_ym) {
					this.axis_ym = true;
					
					//Sfx
					sfxList.equip_move && sfxList.equip_move.play();
					
					this.pos.y += axis_y;
					this.pos.y < 0 && (this.pos.y = em.rows-1);
					this.pos.y > em.rows-1 && (this.pos.y = 0);
				  
				  this.setPosition(this.x, (this.pos.y * em.padY) + em.offsetY);
				  
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_y == 0) this.axis_ym = false;
				
				//Select
				if(btnA && !this.btnA) {
					this.btnA = true;
					
					//Equip
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';

				  if(icon.name == 'empty') {
					  //Play no anim
					 	this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
				    icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	 	s.TweenTo('_scale',s.oScale,0.1);
				   	});
				   	
				   	sfxList.menu_locked && sfxList.menu_locked.play();
				  }
				 	else if(icon.name != 'empty') {
				 		this.card.loadout[idSection] = b5.Game.GetItemId(icon.name);
				 		isEmpty = false;
				 	}
				 	
				 	//Animate
				 	if(!isEmpty && icon.name != 'empty') {
				 		pIconEq.timelines.remove(); //Clear any anim
						pIconEq.setPosition(this.x,this.y);
						pIconEq.visible = true;
						pIconEq._scale = 1;
						//Anim sheen
						pIconSheen.sheen();
						
						//Sfx
				  	sfxList.select_sfx.play();
						
						//Anim scale
					 	this.TweenToWithEnd('_scale', this.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					 	//Anim icon scale
					 	icon.TweenToWithEnd('_scale', icon.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					}
					
				}
				else if(!btnA) this.btnA = false;
				
				//Unequip
				if(btnX && !this.btnX) {
					this.btnX = true;
					
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';
					
					if(!isEmpty) {
						pIconEq._scale = 1;
						pIconEq.TweenTo('_scale',0,0.2, b5.Ease.linear, true, 0);
						
						//Unequip
						this.card.loadout[idSection] = b5.Game.GetItemId('empty');
						
						sfxList.select_sfx.play();
					}
					else {
						//Play no anim
					  this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
				  	});
				   	icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	 	s.TweenTo('_scale',s.oScale,0.1);
				   	});
				   	
				   	sfxList.menu_locked && sfxList.menu_locked.play();
					}
					
				}
				else if(!btnX) this.btnX = false;
				
				//Back
				if(btnB && !this.btnB) {
					this.btnB = true;
					
					//Return
					this.card.goBackToFront();
				}
				else if(!btnB) this.btnB = false;
			}
			
			plyrCard.addActor(listBox);
			listBox.id = idSection + "ListBox";
			plyrCard.current = listBox;
		}
		
				
		/* 
		* ========== CHARMS SECTION ==========
		*/
		
		plyrCard.createCharmSection = function(idSection,title) {
			var listBox = new b5.Actor(),
			textSec = new b5.LabelActor(),
			textWpnInfo = new b5.LabelActor(),
			atlas = scene.findResource('EquipCardCommonAtlas','brush'),
			extraBoldFont = scene_GUI.findResource('CupheadVogueExtraBoldFont','brush');
			
			textSec.font = textWpnInfo.font = scene_GUI.findResource('CupheadMemphisFont', 'brush');
			listBox.addActor(textSec);
			listBox.addActor(textWpnInfo);
			
			textWpnInfo.onTick = function() {
				this.setFormatLine(0, 0, 0, [null, extraBoldFont,0,-25,1.6,1.6],true);
				this.setFormatLine(1, 0, 0, [null, extraBoldFont,0,-7,1.15,1.15]);
				
				this.setFormatLine(2, 0, 0, [null, textSec.font]);
				this.setFormatLine(3, 0, 0, [null, textSec.font]);
			}
			textWpnInfo._scale = 0.62;
			textWpnInfo.line_height = 50;
			textWpnInfo._y = 140;
			
			textWpnInfo.fill_style = b5.Game.Styles.text_pausemenu;
			
			textWpnInfo.card = this;
			
			textWpnInfo.updateInfoFor = function(icon) {
				if(!icon) icon = 'empty';
				if(icon == 'empty') icon = 'equip_card_empty_locked';
				
				this.text = 
				  b5.Game.Texts.texts[icon] + '\n' +
				  b5.Game.Texts.texts[icon+':desc'] +'\n'+
					b5.Game.Texts.texts[icon+':info'];
			}
			
			textWpnInfo.updateInfoFor( b5.Game.GetItemName(this.loadout[idSection]) );
			
			textSec._scale = 1.3;
			textSec._y = -220;
			textSec.fill_style = "#d5c2b0";
			textSec.text = title;
			
			for(var m = 0, a = equipCardsManager.charmLay, lx = a.offsetX, ly = a.offsetY, cl = 0, cly = 0, b = a.columns; m < a.length; m++) {
				var spc = new b5.Actor();
				spc.atlas = atlas;
				listBox.addActor(spc);
				spc.current_frame = 45;
				spc._scale = a.scale;
				spc.opacity = 0.5;
				
				spc.setPosition(lx, ly);
				
				//Add icon
				var icon = new b5.Actor(),
				item = charmList[m] || 'empty';
				
				if(this.inventory._charms.indexOf(b5.Game.GetItemId(item)) == -1 && !b5.Game.Flags.allItemsUnlocked)
				  item = 'empty';
				
				icon.atlas = scene.findResource(item + ':EQUIP_ICON','brush');
				icon.frame_speed = 12;
				icon._scale = 1 / a.scale;
				icon.oScale = icon.scale;
				icon.use_parent_opacity = false;
				icon.name = item;
				icon.id = icon.name+'-iconBack';
				icon.tag = "icon";
				icon.E = null;
				icon.pos = {
					x: cl,
					y: cly
				};
				spc.addActor(icon);
				icon.card = this;
				
				cl++; 
				lx += a.padX;
				cl >= b && (ly += a.padY, lx = a.offsetX, cl = 0, cly++);
			}
			
			listBox.getIconFromPos = function(x,y, actor) {
				var icons = this.findActorsByTagName('icon',true);
				for(var g = 0; g < icons.length; g++)
				  if(icons[g].pos.x == x && icons[g].pos.y == y) return actor ? icons[g] : icons[g].name;
			}
			
			//If not equiped
			var tmpunequiped = b5.Game.GetItemName(this.loadout[idSection]) == "empty";
			tmpunequiped && textWpnInfo.updateInfoFor(listBox.getIconFromPos(0,0));
			
			//Selector
			var pIconSel = new b5.Actor(),
			pos = listBox.findActorById( b5.Game.GetItemName(this.loadout[idSection])+'-iconBack',true);
			
			if(!pos || tmpunequiped) pos = {
			  	parent: {
			  		x: equipCardsManager.charmLay.offsetX,
			  		y: equipCardsManager.charmLay.offsetY
			  	},
			  	pos: {
			  		x: 0,
			  		y: 0
			  	},
			  	unequiped: true
			  }
			
			pIconSel.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
			pIconSel.setPosition(pos.parent.x,pos.parent.y);
			pIconSel._oy = 2;
			pIconSel.playAnim('icon_selector', true);
			pIconSel._scale = pIconSel.oScale = 1.05;
			pIconSel._layer = 2;
			pIconSel.pos = {x: pos.pos.x, y: pos.pos.y};
			
		  //Sheen
		  var pIconSheen = new b5.Actor();
		  pIconSheen.atlas = pIconSel.atlas;
		  pIconSheen.visible = false;
		  pIconSheen.onAnimEnd = function() {
		  	this.visible = false;
		  }
		  pIconSheen.sheen = function() {
		  	this.visible = true;
		  	this._oy = 50;
		  	this.playAnim('icon_sheen');
		  }
		  pIconSel.addActor(pIconSheen);
		  
		  //Equiped marker
		  var pIconEq = new b5.Actor();
		  pIconEq.atlas = pIconSheen.atlas;
		  pIconEq.visible = !pos.unequiped;
		  pIconEq.playAnim('icon_equiped',true);
		  listBox.addActor(pIconEq);
		  pIconEq.x2 = 30;
		  pIconEq.y2 = -30;
		  pIconEq._layer = 3;
		  pIconEq.setPosition(pos.parent.x,pos.parent.y);
	
			listBox.addActor(pIconSel);
	
			pIconSel.card = plyrCard;
			pIconSel.box = listBox;
	
			//Controls
			pIconSel.resetHolds = function() {
				this.btnA = this.btnB = this.btnX = true,
				this.axis_xm = true;
				this.axis_ym = true;
			}
			pIconSel.resetHolds();
	
			pIconSel.onTick = function() {
				var input = b5.Game.Input,
				axis_x = Math.round(this.card.isPlyOne ? input.player1.axis_x: input.player2.axis_x),
				axis_y = Math.round(this.card.isPlyOne ? input.player1.axis_y: input.player2.axis_y),
				btnA = this.card.isPlyOne ? input.player1.A: input.player2.A,
				btnB = this.card.isPlyOne ? input.player1.B: input.player2.B,
				btnX = this.card.isPlyOne ? input.player1.X: input.player2.X,
				em = equipCardsManager.charmLay;
				
				//Move in columns and rows
				if(axis_x != 0 && !this.axis_xm) {
					this.axis_xm = true;
					
					sfxList.equip_move && sfxList.equip_move.play();
					
					this.pos.x += axis_x;
					this.pos.x < 0 && (this.pos.x = em.columns-1);
					this.pos.x > em.columns-1 && (this.pos.x = 0);
				  
					this.setPosition((this.pos.x * em.padX) + em.offsetX, this.y);
					
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_x == 0) this.axis_xm = false;
				
				//Move in columns and rows
				if(axis_y != 0 && !this.axis_ym) {
					this.axis_ym = true;
					
					sfxList.equip_move && sfxList.equip_move.play();
					
					this.pos.y += axis_y;
					this.pos.y < 0 && (this.pos.y = em.rows-1);
					this.pos.y > em.rows-1 && (this.pos.y = 0);
				  
				  this.setPosition(this.x, (this.pos.y * em.padY) + em.offsetY);
				  
					textWpnInfo.updateInfoFor(this.box.getIconFromPos(this.pos.x,this.pos.y));
				}
				else if(axis_y == 0) this.axis_ym = false;
				
				//Select
				if(btnA && !this.btnA) {
					this.btnA = true;
					
					//Equip
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';

				  if(icon.name == 'empty') {
					  //Play no anim
					 	this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
				    icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	 	s.TweenTo('_scale',s.oScale,0.1);
				   	});
				   	
				   	sfxList.menu_locked && sfxList.menu_locked.play();
				  }
				 	else if(icon.name != 'empty') {
				 		this.card.loadout[idSection] = b5.Game.GetItemId(icon.name);
				 		isEmpty = false;
				 	}
				 	
				 	//Animate
				 	if(!isEmpty && icon.name != 'empty') {
				 		pIconEq.timelines.remove(); //Clear any anim
						pIconEq.setPosition(this.x,this.y);
						pIconEq.visible = true;
						pIconEq._scale = 1;
						//Anim sheen
						pIconSheen.sheen();
						
						sfxList.select_sfx.play();
						
						//Anim scale
					 	this.TweenToWithEnd('_scale', this.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					 	//Anim icon scale
					 	icon.TweenToWithEnd('_scale', icon.oScale + 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
					 	});
					}
					
				}
				else if(!btnA) this.btnA = false;
				
				//Unequip
				if(btnX && !this.btnX) {
					this.btnX = true;
					
					var icon = this.box.getIconFromPos(this.pos.x,this.pos.y, true),
					isEmpty = b5.Game.GetItemName(this.card.loadout[idSection]) == 'empty';
					
					if(!isEmpty) {
						pIconEq._scale = 1;
						pIconEq.TweenTo('_scale',0,0.2, b5.Ease.linear, true, 0);
						
						//Unequip
						this.card.loadout[idSection] = b5.Game.GetItemId('empty');
						
						sfxList.select_sfx.play();
					}
					else {
						//Play no anim
					  this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
					  	s.TweenTo('_scale',s.oScale,0.1);
				  	});
				   	icon.TweenToWithEnd('_scale', icon.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  	 	s.TweenTo('_scale',s.oScale,0.1);
				   	});
				   	
				   	sfxList.menu_locked && sfxList.menu_locked.play();
					}
					
				}
				else if(!btnX) this.btnX = false;
				
				//Back
				if(btnB && !this.btnB) {
					this.btnB = true;
					
					//Return
					this.card.goBackToFront();
				}
				else if(!btnB) this.btnB = false;
			}
			
			plyrCard.addActor(listBox);
			listBox.id = idSection + "ListBox";
			plyrCard.current = listBox;
		}
		
		/* 
		* ========== LIST SECTION ==========
		*/
		
		plyrCard.createListSection = function(mapWorldName) {
			var textSec = new b5.LabelActor(),
			secBox = new b5.Actor(),
			atlas = scene.findResource('EquipCardCommonAtlas','brush'),
			extraBoldFont = scene_GUI.findResource('CupheadVogueExtraBoldFont','brush'),
			memphisFont = scene_GUI.findResource('CupheadMemphisFont','brush');
			
			textSec.font = extraBoldFont;
			secBox.addActor(textSec);
			secBox.card = this;
			
			textSec._y = -218;
			textSec._scale = 1.25;
			textSec.fill_style = "#d5c2b0";
			textSec.setTextFmt(game.Texts.texts.equip_card_list);
			
			secBox.btnB = true;
			
			secBox.onTick = function() {
				var input = b5.Game.Input,
		  	axis_x = Math.round(this.card.isPlyOne ? input.player1.axis_x: input.player2.axis_x),
	  		btnB = this.card.isPlyOne ? input.player1.B: input.player2.B;
			 
			 if(btnB && !this.btnB) {
					this.btnB = true;
					this.card.goBackToFront();
				}
				else if(!btnB) this.btnB = false;
				
			}
			
			//Worlds texts
			var worldTextBox = new b5.Actor();
			secBox.addActor(worldTextBox);
			worldTextBox.setPosition(-180,-120);
			
			worldTextBox.updateDisplay = function(scale, pad, startIndex) {
				this.removeAllActors();
				for(var a = startIndex || 0, x = 0, b = levelDisplays.display; a < b.length; a++) {
				  var wrld = new b5.LabelActor();
					wrld.font = extraBoldFont;
					wrld.text = b5.Game.Texts.texts[b[a]];
					wrld.fill_style = b5.Game.Styles.text_pausemenu;
					wrld._x = x;
					wrld._scale = scale;
					x += pad;
					this.addActor(wrld);
					
					//Temp
					if(a > 0) wrld.fill_style = '#767676';
					
					if(a >= 3) break;
				}
			}
			
			worldTextBox.updateDisplay(0.52, 120);
			
			//Head bar
			var topBar = new b5.Actor();
			topBar.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
			topBar.current_frame = b5.Maths.randomRange(17,18);
			topBar._y = -80;
			secBox.addActor(topBar);
			
			//Head texts
			var contractL = new b5.LabelActor();
			contractL.font = extraBoldFont;
			contractL.fill_style = '#d5c2b0';
			contractL.text_align = 'left';
			contractL.setPosition(-230,6);
			contractL._scale = 0.42;
			contractL.text = game.Texts.texts.equip_card_contract;
			topBar.addActor(contractL);
			
			var gradeL = new b5.LabelActor();
			gradeL.font = extraBoldFont;
			gradeL.fill_style = '#d5c2b0';
			gradeL.setPosition(110,6);
			gradeL._scale = 0.42;
			gradeL.text = game.Texts.texts.equip_card_grade;
			topBar.addActor(gradeL);
			
			var timeL = new b5.LabelActor();
			timeL.font = extraBoldFont;
			timeL.fill_style = '#d5c2b0';
			timeL.text_align = 'right';
			timeL.setPosition(231,6);
			timeL._scale = 0.42;
			timeL.text = game.Texts.texts.equip_card_time;
			topBar.addActor(timeL);
			
			//List
		  listLBox = new b5.Actor();
		  secBox.addActor(listLBox);
		  listLBox.setPosition(-220,-45);
		  listLBox.pad_y = 33;
		  
		  //Replace dots with character of strings
		  listLBox.dotLine = function(dotCount,rightText) {
		  	var dots = new Array(dotCount).fill(" .");
		  	//Right
		  	for(var i = 0, r = rightText; i < r.length; i++) dots[i] = r[i];
		  	//Left
		  	return dots.join('');
		  };
		  
		  listLBox.updateList = function(mWorld) {
			  for(var m = 0, py = 0, r = null, g = levelDisplays.worlds[mWorld]; m < g.length; m++) {
			  	//Get level name and type
			  	r = g[m].split(':');
			  	
			  	var levelName = r[0],
			  	levelType = r[1];
			  	
			  	//Create check box 
			  	var cb = new b5.Actor();
			  	if(levelType == 'boss') cb.atlas = topBar.atlas;
			  	cb.current_frame = b5.Maths.randomRange(0,6);
			  	cb._y = py;
			  	listLBox.addActor(cb);
			  	py += listLBox.pad_y;
			  	
			  	//Level data
			  	const lvd = game.SlotUtils.getLevelData(game.LevelIDs[levelName]);
			  	if(lvd) {
				  	if(lvd.completed && levelType == 'boss') {
				  		//Add checkmark or star (if completed on extreme)
				  		var chm = new b5.Actor();
				  		chm.atlas = cb.atlas;
				  		cb.addActor(chm);
				  		chm.current_frame = lvd.difficultyBeaten == 2 ? b5.Maths.randomRange(19,21) : b5.Maths.randomRange(7,16);
				  	}
				  	
				  	//Level name
				    var lvNLabel = new b5.LabelActor();
				  	lvNLabel.font = memphisFont;
				  	lvNLabel._y = cb.y;
				  	lvNLabel.text_align = 'left';
				  	lvNLabel._scale = 0.58;
				  	lvNLabel._x = 17;
				  	lvNLabel._y2 = 8;
				  	lvNLabel.text = lvd.played ? (game.Texts.texts[levelName] || equipCardsManager.locked_level) : equipCardsManager.locked_level;
				  	lvNLabel.text = this.dotLine(22,lvNLabel.text);
				  	lvNLabel.fill_style = game.Styles.text_pausemenu;
				  	listLBox.addActor(lvNLabel);
				  	
				  	//Grade
				  	var gradeLabel = new b5.LabelActor();
				  	gradeLabel.font = memphisFont;
				  	gradeLabel._y = cb.y;
				  	gradeLabel._x = 320;
				  	gradeLabel._y2 = 8;
				  	gradeLabel._scale = 0.58;
				  	gradeLabel.text_align = 'left';
				  	gradeLabel.fill_style = lvNLabel.fill_style;
				  	gradeLabel.text = lvd.played ? game.GradeTable[lvd.grade] : '?';
				  	listLBox.addActor(gradeLabel);
				  	
				  	//Time
				  	var tm = new Date(lvd.bestTime*1000);
				  	timeLabel = new b5.LabelActor();
				  	timeLabel.font = memphisFont;
				  	timeLabel._y = cb.y;
				  	timeLabel._y2 = 8;
				  	timeLabel._x = 430;
				  	timeLabel._scale = 0.58;
				  	timeLabel.fill_style = lvNLabel.fill_style;
				  	
				  	timeLabel.text = lvd.played && lvd.completed ? (
				  		String(tm.getMinutes()) + ':' + String(tm.getSeconds()).padStart(2,'0')
				  	) : '?:??';
				  	listLBox.addActor(timeLabel);
				  	
			  	}
			  }
		  }
		  
		  listLBox.updateList(mapWorldName);
			
			plyrCard.addActor(secBox);
			plyrCard.current = secBox;
		}
		
		/* 
		* ============== FRONT BOX ================
		*/
		
		//Create icons

		const iconFrontBox = new b5.Actor();

		plyrCard.selX = -201,
		plyrCard.selSpace = 100;

		plyrCard.inFrontPage = true;

		plyrCard.addActor(iconFrontBox);
		plyrCard.frontBox = iconFrontBox;

		iconFrontBox.setPosition(2, 165);
		
		iconFrontBox.updateIcon = function(id, itemName) {
			var icon = this.findActorById(id);
			if(icon) {
				icon.name = itemName;
				icon.atlas = scene.findResource(itemName+':EQUIP_ICON','brush');
			}
		}

		for (var a = 0, sx = plyrCard.selX, sy = 0, ssp = plyrCard.selSpace, icon; a < 5; a++) {
			var ico = new	b5.Actor();
			ico.frame_speed = 12;

			iconFrontBox.addActor(ico);
			ico.setPosition(sx, sy);
			ico.id = a;
			sx += ssp;
			
			if(a != 4) 
	  		iconFrontBox.updateIcon(ico.id, 
		  	  game.GetItemName(plyrCard.loadout[plyrCard.front_sel_ids[a]])
	  		);
			else {
				ico.tag = "list";
				ico.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
				ico.playAnim('list',true);
			}
			
		}
		
		//Front text
		const ftext = new b5.LabelActor();
		ftext.fill_style = game.Styles.text_pausemenu;
	  ftext.font = scene_GUI.findResource('CupheadMemphisFont','brush');
	  ftext.font2 = scene_GUI.findResource('CupheadVogueExtraBoldFont','brush');
		iconFrontBox.addActor(ftext);
		
		ftext._scale = 0.5;
		
		iconFrontBox.frontText = ftext;
		ftext.card = plyrCard;

		ftext.onTick = function() {
			var itemName = b5.Game.GetItemName(this.card.loadout[this.card.front_sel_ids[this.card.front_sel]]) 
	    this.text = b5.Game.Texts.texts.equip_card_front_text+"\n"+
	    (b5.Game.Texts.texts[itemName] || (this.card.front_sel == 4 ? b5.Game.Texts.texts.list : ''));
	    
	    ftext.setFormatLine(0,0,0,[null, null, -845, 235,1,1,0,0,0,'left']);
	    ftext.setFormatLine(1,0,0,[null,this.font2,null,423,1.88,1.88]);
	    
		}

		//Selector
		var pIconSel = new b5.Actor();
		pIconSel.atlas = scene.findResource('EquipCardCommonAtlas', 'brush');
		pIconSel.setPosition(plyrCard.selX, 0);
		pIconSel.playAnim('icon_selector', true);
		pIconSel._oy = 2;
		pIconSel._scale = pIconSel.oScale = 1.05;
		pIconSel._layer = 2;

		iconFrontBox.addActor(pIconSel);

		pIconSel.card = plyrCard;
		pIconSel.iconBox = iconFrontBox;
		iconFrontBox.selector = pIconSel;

		//Controls
		pIconSel.resetHolds = function() {
			this.btnA = this.btnB = this.btnX = true,
			this.axis_xm = true;
		}
		pIconSel.onAVChanged = pIconSel.resetHolds;
		pIconSel.resetHolds();

		pIconSel.onTick = function() {
			var input = b5.Game.Input,
			axis_x = Math.round(this.card.isPlyOne ? input.player1.axis_x: input.player2.axis_x),
			btnA = this.card.isPlyOne ? input.player1.A: input.player2.A,
			btnB = this.card.isPlyOne ? input.player1.B: input.player2.B,
			btnX = this.card.isPlyOne ? input.player1.X: input.player2.X;
			
			//Select icons front page
			if (this.card.inFrontPage) {
				
				//Button A
				
				if (btnA && !this.btnA) {
					this.btnA = true;

					//Select
					switch (this.card.front_sel) {
						case 0: //Open Primary weapon section
						  this.card.openSection('primaryWeapon');
							break;
						case 1: //Open Secondary weapon section
						  this.card.openSection('secondaryWeapon');
							break;
						case 2: //Open super section
						  this.card.openSection('super');
						  break;
						case 3: 
							this.card.openSection('charm');
							break;
						case 4:
							this.card.openSection('list');
					}
				} else if (!btnA) this.btnA = false;

				//X axis
				if (axis_x != 0 && !this.axis_xm) {
					this.axis_xm = true;

					//Move right
					this.card.front_sel += axis_x;

					if (this.card.front_sel < 0) this.card.front_sel = 0;
					if (this.card.front_sel > 4) this.card.front_sel = 4;

					this.x2 = this.card.selSpace * this.card.front_sel;
					this.dirty();
					
					sfxList.equip_move && sfxList.equip_move.play();
					
					//Update text with weapon name 
					
				} else if (axis_x == 0) this.axis_xm = false;
				
				//Button B
				
				if(btnB && !this.btnB) {
					this.btnB = true;
					//Exit card
					equipCardsManager.hideAll();
					this.card.inFrontPage = false;
				}
				else if(!btnB) this.btnB = false;
				
				//Button X (dash/unequip)
				
				if(btnX && !this.btnX) {
					this.btnX = true;
					
				  var id = this.card.front_sel_ids[this.card.front_sel], icon;
				  
				  //Unequip item
				  if(id && id != "primaryWeapon" && this.card.loadout[id] != b5.Game.GetItemId("empty") ) {
				  	//Update icon
				  	icon = this.iconBox.findActorById(this.card.front_sel);
				  	this.card.loadout[id] = b5.Game.GetItemId("empty");
				  	
				  	iconFrontBox.updateIcon(icon.id, game.GetItemName("empty") );
				  	
				  	sfxList.select_sfx.play();
				  }
				  else {
				  	//Play no anim
				  	this.TweenToWithEnd('_scale', this.oScale - 0.17, 0.1, b5.Ease.linear, true,	0, function(s) {
				  		s.TweenTo('_scale',s.oScale,0.1);
				  	});
				  	
				  	sfxList.menu_locked && sfxList.menu_locked.play();
				  	
				  }
					
				}
				else if(!btnX) this.btnX = false;
				
			}

		}

	//	break;
	}

	app.events.once('sceneunload', function() {
		var eqs = scene_GUI.findActorsByTagName('EquipCardUI', true);
		for (var i = 0; i < eqs.length; i++)
			eqs[i].destroy();
	});


	return myexports;
};